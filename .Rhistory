# Get district specific gender gaps
assess_adj$gender_list <- list("Male" = sample(c(0.0, -0.05, 0.25, 0.1, 0.275, 0.375), 1),
"Female" = sample(c(0.0, -0.05, 0.05, -0.1, 0.125, -0.075), 1))
# Get district specific FRL gaps
assess_adj$frl_list <- list("0" = sample(c(0.8, 0.6, 0.7, 0.45, 0.51, 0.6125, 0.975), 1),
"1" = sample(c(0.05, 0, -0.25, -0.3, -0.125, -0.6, -0.5), 1))
# Get assessment simulation  defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance randomly by district
assess_sim_par$error_var <- sample(12:18, 1)
# Increase coefficient effects randomly by district
# assess_sim_par$fixed_param <- assess_sim_par$fixed_param * sample(9:11, 1)
# Downgrade IEP difference randomly by district
assess_sim_par$fixed_param[2] <- 6
# assess_sim_par$fixed_param[4] <- sample(c(-0.75, -0.5, -.66, -1), 1)
# Downgrade LEP difference
assess_sim_par$fixed_param[3] <- 2
assess_sim_par$fixed_param[4] <- -4
assess_sim_par$fixed_param[5] <- -2
assess_sim_par$fixed_param[6] <- -2
assess_sim_par$fixed_param[7] <- 1.5
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- sample(8:12, 1)
# Set group level variances
assess_sim_par$random_param$random_var <- c(sample(c(0.4, 0.3, 0.5, 0.375, 0.425), 1),
sample(c(0.125, 0.5, 0.66, 0.75), 1))
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(75, 550)
grad_adj <- sim_control()$grad_adjustment
grad_sim_par <- sim_control()$grad_sim_par
# Covariance parameters are an imprecise way of modifying the graduation rate
grad_sim_par$cov_param$opts[[2]]$mean <- sample(-2:16/20,1)
grad_sim_par$cov_param$opts[[2]]$sd <- sample(9:11/10, 1)
grad_sim_par$cov_param$opts[[1]]$mean <- sample(30:42/-15, 1)
grad_sim_par$cov_param$opts[[1]]$sd <- sample(6:12/10, 1)
grad_sim_par$random_var <- sample(180:380/60, 1)
# Adjust up the impact of academic variables on outcomes
grad_sim_par$fixed_param[[1]] <- sample(10:30/2.75, 1) # intercept
grad_sim_par$fixed_param[[2]] <- sample(1:8/0.6, 1) # math
grad_sim_par$fixed_param[[3]] <- sample(2:14/8, 1) # gpa
# grad_sim_par$fixed_param[[4]] <- sample(2:14/8, 1) # gifted
grad_sim_par$fixed_param[[5]] <- sample(10:20/-8, 1) # iep
grad_sim_par$fixed_param[[6]] <- sample(6:16/-12, 1) # frpl
grad_sim_par$fixed_param[[7]] <- sample(6:14/-14, 1) # ell
grad_sim_par$fixed_param[[8]] <- sample(2:14/-25, 1) # male
grad_adj$frl_list <- list("0" = sample(c(0, 0.25, 0.1, 0.125, 0.175), 1),
"1" = sample(c(0.05, 0, -0.5, -0.1, -0.125, -0.3), 1))
grad_adj$race_list <- list("White" = sample(c(0.4, 0.35, 0.1, 0.225, 0.175, 0.215), 1),
"Black or African American" = sample(c(0, -0.35, -0.3, -0.125, -0.2), 1),
"Asian" = sample(c(0.4, 0.25, 0.1, 0.125, 0.05), 1),
"Hispanic or Latino Ethnicity" = sample(c(0.05, 0, -0.1, -0.125, -0.2), 1),
"Demographic Race Two or More Races" = sample(c(-2:2 / 40), 1),
"American Indian or Alaska Native" = sample(c(-8:8 / 40), 1),
"Native Hawaiian or Other Pacific Islander" = sample(c(-8:8 / 40), 1)
)
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
race_prob_star <- runif(7)
race_prob_star[1] <- race_prob_star[1] * 7
race_prob_star[2] <- race_prob_star[2] * 1.5
race_prob_star[3] <- race_prob_star[3] / 3.75
race_prob_star[4] <- race_prob_star[4] * 2.25
race_prob_star[5] <- race_prob_star[5] * 2.25
race_prob_star[6] <- race_prob_star[6] / 3.75
race_prob_star[7] <- race_prob_star[7] / 4.25
race_prob_star <- race_prob_star / sum(race_prob_star)
###################
# Conduct the simulation
stu_pop <- simpop(sample(c(2500, 2250, 2750, 3500, 1200, 5000), 1),
control = sim_control(nschls = sample(8:16, 1),
race_prob = race_prob_star,
n_cohorts = 4L,
minyear = 1998,
maxyear = 2018,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_sim_parameters = grad_sim_par,
grad_adjustment = grad_adj))
# Get assessment adjustment controls
assess_adj <- sim_control()$assessment_adjustment
assess_adj$school_list <- NULL
assess_adj$perturb_school <- function(x, schid, sd, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- abs(val_mean) / 3
val_mean <- val_mean * 2
y <- x + rnorm(1, val_mean, val_sd)
return(y)
}
# Make scores spread out more
assess_adj$perturb_base <- function(x, sd)
{
mean_shift <- rnorm(1, sd = 3)
y <- x + rnorm(1, mean_shift, sd * 0.8)
return(y)
}
# Add racial inequality to assessment scores
assess_adj$race_list <- list("White" = sample(c(0.84, 0.95, 1.2, 1.25, 0.675, 1.45), 1),
"Black or African American" = sample(c(0, -0.5, -0.3, -0.125, -0.2), 1),
"Asian" = sample(c(0.4, 0.25, 0.1, 0.125, 0.05, -0.2, -0.15), 1),
"Hispanic or Latino Ethnicity" = sample(c(0.05, 0, -0.4, -0.1, -0.125, -0.2), 1),
"Demographic Race Two or More Races" = sample(c(-2:2 / 40), 1),
"American Indian or Alaska Native" = sample(c(-8:8 / 40), 1),
"Native Hawaiian or Other Pacific Islander" = sample(c(-8:8 / 40), 1)
)
# Get district specific gender gaps
assess_adj$gender_list <- list("Male" = sample(c(0.0, -0.05, 0.25, 0.1, 0.275, 0.375), 1),
"Female" = sample(c(0.0, -0.05, 0.05, -0.1, 0.125, -0.075), 1))
# Get district specific FRL gaps
assess_adj$frl_list <- list("0" = sample(c(0.8, 0.6, 0.7, 0.45, 0.51, 0.6125, 0.975), 1),
"1" = sample(c(0.05, 0, -0.25, -0.3, -0.125, -0.6, -0.5), 1))
# Get assessment simulation  defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance randomly by district
assess_sim_par$error_var <- sample(12:18, 1)
# Increase coefficient effects randomly by district
# assess_sim_par$fixed_param <- assess_sim_par$fixed_param * sample(9:11, 1)
# Downgrade IEP difference randomly by district
assess_sim_par$fixed_param[2] <- 6
# assess_sim_par$fixed_param[4] <- sample(c(-0.75, -0.5, -.66, -1), 1)
# Downgrade LEP difference
assess_sim_par$fixed_param[3] <- 2
assess_sim_par$fixed_param[4] <- -4
assess_sim_par$fixed_param[5] <- -2
assess_sim_par$fixed_param[6] <- -2
assess_sim_par$fixed_param[7] <- 1.5
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- sample(8:12, 1)
# Set group level variances
assess_sim_par$random_param$random_var <- c(sample(c(0.4, 0.3, 0.5, 0.375, 0.425), 1),
sample(c(0.125, 0.5, 0.66, 0.75), 1))
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(75, 550)
grad_adj <- sim_control()$grad_adjustment
grad_sim_par <- sim_control()$grad_sim_par
# Covariance parameters are an imprecise way of modifying the graduation rate
grad_sim_par$cov_param$opts[[2]]$mean <- sample(-2:16/20,1)
grad_sim_par$cov_param$opts[[2]]$sd <- sample(9:11/10, 1)
grad_sim_par$cov_param$opts[[1]]$mean <- sample(30:42/-15, 1)
grad_sim_par$cov_param$opts[[1]]$sd <- sample(6:12/10, 1)
grad_sim_par$random_var <- sample(180:380/60, 1)
# Adjust up the impact of academic variables on outcomes
grad_sim_par$fixed_param[[1]] <- sample(10:30/2.75, 1) # intercept
grad_sim_par$fixed_param[[2]] <- sample(1:8/0.6, 1) # math
grad_sim_par$fixed_param[[3]] <- sample(2:14/8, 1) # gpa
# grad_sim_par$fixed_param[[4]] <- sample(2:14/8, 1) # gifted
grad_sim_par$fixed_param[[5]] <- sample(10:20/-8, 1) # iep
grad_sim_par$fixed_param[[6]] <- sample(6:16/-12, 1) # frpl
grad_sim_par$fixed_param[[7]] <- sample(6:14/-14, 1) # ell
grad_sim_par$fixed_param[[8]] <- sample(2:14/-25, 1) # male
grad_adj$frl_list <- list("0" = sample(c(0, 0.25, 0.1, 0.125, 0.175), 1),
"1" = sample(c(0.05, 0, -0.5, -0.1, -0.125, -0.3), 1))
grad_adj$race_list <- list("White" = sample(c(0.4, 0.35, 0.1, 0.225, 0.175, 0.215), 1),
"Black or African American" = sample(c(0, -0.35, -0.3, -0.125, -0.2), 1),
"Asian" = sample(c(0.4, 0.25, 0.1, 0.125, 0.05), 1),
"Hispanic or Latino Ethnicity" = sample(c(0.05, 0, -0.1, -0.125, -0.2), 1),
"Demographic Race Two or More Races" = sample(c(-2:2 / 40), 1),
"American Indian or Alaska Native" = sample(c(-8:8 / 40), 1),
"Native Hawaiian or Other Pacific Islander" = sample(c(-8:8 / 40), 1)
)
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
race_prob_star <- runif(7)
race_prob_star[1] <- race_prob_star[1] * 7
race_prob_star[2] <- race_prob_star[2] * 1.5
race_prob_star[3] <- race_prob_star[3] / 3.75
race_prob_star[4] <- race_prob_star[4] * 2.25
race_prob_star[5] <- race_prob_star[5] * 2.25
race_prob_star[6] <- race_prob_star[6] / 3.75
race_prob_star[7] <- race_prob_star[7] / 4.25
race_prob_star <- race_prob_star / sum(race_prob_star)
###################
# Conduct the simulation
stu_pop <- simpop(sample(c(2500, 2250, 2750, 3500, 1200, 5000), 1),
control = sim_control(nschls = sample(8:16, 1),
race_prob = race_prob_star,
n_cohorts = 4L,
minyear = 1998,
maxyear = 2018,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par))
stu_pop <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
best_school = NULL))
grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
# Conduct the simulation
stu_pop <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj)
# Conduct the simulation
stu_pop <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
# Conduct the simulation
stu_pop <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
grad_adj$perturb_school()
grad_adj$perturb_school
library(OpenSDPsynthR)
set.seed(0525212) # set the seed
library(magrittr)
library(stringr)
# The synthesizer needs some input paramaters
# As it is the defaults are not sufficient to give realistic assessment data
# These change those defaults to make the scores less deterministic
assess_adj <- sim_control()$assessment_adjustment
# Make scores spread out more
assess_adj$perturb_base <- function(x, sd)
{
mean_shift <- rnorm(1, sd = 3)
y <- x + rnorm(1, mean_shift, sd * 0.8)
return(y)
}
assess_adj$gender_list <- list("Male" = 1,
"Female" = -1)
assess_adj$frl_list <- list("0" = 0.1,
"1" = -0.1)
# Downadjust the IEP difference
# Get defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance
assess_sim_par$error_var <- 15
# Increase coefficient effects
assess_sim_par$fixed_param <- assess_sim_par$fixed_param * 10
# Downgrade IEP difference
assess_sim_par$fixed_param[4] <- -0.75
# Downgrade LEP difference
assess_sim_par$fixed_param[5] <- -1
assess_sim_par$fixed_param[6] <- 0
assess_sim_par$fixed_param[7] <- 1
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- 10
# Set group level variances
assess_sim_par$random_param$random_var <- c(0.4, 0.75)
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(100, 420)
grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
# Conduct the simulation
stu_pop <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
# Build analysis file from the datasets in the list produced by simpop
#
out_data <- dplyr::left_join(stu_pop$stu_assess, stu_pop$stu_year)
#
out_data <- out_data %>% select(-exit_type, -cohort_grad_year, -cohort_year, -enrollment_status,
-grade_enrolled, -grade_advance, -ndays_attend,
-ndays_possible)
out_data <- left_join(out_data, stu_pop$demog_master %>%
select(sid, Sex, Race))
# Conver back to dataframe
out_data <- as.data.frame(out_data)
names(out_data)
head(stu_pop$demog_master)
simlist <- stu_pop
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
names(out_data)
table(out_data$Race)
?fct_expand
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
}
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sapply(sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), 1))
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), 1)
summary(out_data$Race)
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]),
replace = TRUE)
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]),
replace = TRUE)
summary(out_data$Race)
names(out_data)
?rename
# School Code
rename(out_data, AI_CODE = schid)
# School Code
out_data <- rename(out_data, AI_CODE = schid)
names(out_data)
head(simlist$schools)
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
# Augment race variables
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]),
replace = TRUE)
# Factor expand
names(out_data)
?fitdistr
samp_score <- rnorm(1000, mean = 800, sd = 195)
summary(samp_score)
samp_score <- rnorm(1000, mean = 1060, sd = 195)
samp_score_w <- rnorm(1000, mean = 533, sd = 100)
samp_score_m <- rnorm(1000, mean = 527, sd = 107)
summary(samp_score_m)
?trim
samp_score_w <- rnorm(1000, mean = 533, sd = 100)
samp_score_w <- ifelse(samp_score_w < 200, 200, samp_score_w)
samp_score_w <- ifelse(samp_score_w > 800, 800, samp_score_w)
samp_score_m <- rnorm(1000, mean = 527, sd = 107)
samp_score_m <- ifelse(samp_score_m < 200, 200, samp_score_m)
samp_score_m <- ifelse(samp_score_m > 800, 800, samp_score_m)
summary(samp_score_m)
samp_score_w <- rnorm(10000, mean = 533, sd = 100)
samp_score_w <- ifelse(samp_score_w < 200, 200, samp_score_w)
samp_score_w <- ifelse(samp_score_w > 800, 800, samp_score_w)
samp_score_m <- rnorm(10000, mean = 527, sd = 107)
samp_score_m <- ifelse(samp_score_m < 200, 200, samp_score_m)
samp_score_m <- ifelse(samp_score_m > 800, 800, samp_score_m)
?fitdistr
fitdistr(samp_score_m)
library(MASS)
fitdistr(samp_score_m)
MASS::fitdistr(samp_score_m, desnfun = "normal")
MASS::fitdistr(samp_score_m, densfun = "normal")
fd <- MASS::fitdistr(samp_score_m, densfun = "normal")
predict(fd, rnorm(100))
?fd
class(fd)
summary(fd)
install.packages("equate")
library(equate)
?equate
samp_score_w <- round(samp_score_w, digits = 0)
table(samp_score_w)
rx <- as.freqtab(samp_score_w)
?freqtab
rx <- freqtab(samp_score_w)
head(simlist$stu_assess)
out_data <- left_join(out_data, simlist$stu_assess %>% select(sid, math_ss, rdg_ss))
out_data <- left_join(out_data, simlist$stu_assess %>% dplyr::select(sid, math_ss, rdg_ss))
ry <- freqtab(round(out_data$math_ss))
zzz <- equate(rx, ry, type= "e")
head(zzz)
plot(zzz)
names(zzz)
head(zzz$concordance$yx)
head(zzz$concordance
)
summary(out_data$math_ss)
ry <- freqtab(round(out_data$math_ss, digits = 0))
zzz <- equate(rx, ry, type= "e")
)
head(zzz$concordance)
ry <- freqtab(round(out_data$math_ss, digits = 0))
zzz <- equate(rx, ry, type= "e")
head(zzz$concordance)
head(ry)
table(ry)
round(out_data$math_ss)
round(out_data$math_ss, digits = 0)
summary(out_data$math_ss)
ry <- freqtab(round(out_data$math_ss, digits = 0))
ry
zzz <- equate(rx, ry, type= "e")
zzz$concordance
data(ACTmath)
head(ACTmath)
zzz <- equate(rx, ry, type= "linear")
head(zzz$concordance)
summary(zzz)
equate(c(2, 5, 20, 28), y = zzz)
zzz <- equate(ry, rx, type= "linear")
equate(c(2, 5, 20, 28), y = zzz)
new_score <- equate(samp_score_m, y = zzz)
summary(new_score)
ry <- freqtab(round(out_data$math_ss, digits = 0))
rx <- freqtab(samp_score_w, digits = 0)
zzz <- equate(ry, rx, type= "linear")
new_score <- equate(samp_score_m, y = zzz)
summary(new_score)
head(new_score)
new_score <- equate(samp_score_w, y = zzz)
head(new_score)
summary(new_score)
summary(samp_score_w)
new_score <- equate(y = zzz, samp_score_w)
summary(new_score)
ry <- freqtab(round(out_data$math_ss, digits = 0))
rx <- freqtab(samp_score_w, digits = 0)
zzz <- equate(ry, rx, type= "linear")
plot(zzz)
?equate
zzz <- equate(ry, rx, type= "equipercentile")
plot(zzz)
new_score <- equate(y = zzz, samp_score_w)
summary(new_score)
new_score <- equate(samp_score_w, y = zzz)
summary(new_score)
summary(ssamp_score_w)
summary(samp_score_w)
zzz <- equate(rx, ry, type= "equipercentile")
new_score <- equate(samp_score_w, y = zzz)
summary(new_score)
plot(zzz)
zzz <- equate(ry, rx, type= "equipercentile")
new_score <- equate(samp_score_w, y = zzz)
summary(new_score)
summary(samp_score_w)
samp_score_w <- rnorm(10000, mean = 533, sd = 100)
samp_score_w <- ifelse(samp_score_w < 200, 200, samp_score_w)
samp_score_w <- ifelse(samp_score_w > 800, 800, samp_score_w)
samp_score_w <- round(samp_score_w, digits = 0)
samp_score_m <- rnorm(10000, mean = 527, sd = 107)
samp_score_m <- ifelse(samp_score_m < 200, 200, samp_score_m)
samp_score_m <- ifelse(samp_score_m > 800, 800, samp_score_m)
samp_score_m <- round(samp_score_m, digits = 0)
fd <- MASS::fitdistr(samp_score_m, densfun = "normal")
ry <- freqtab(round(out_data$math_ss, digits = 0))
rx <- freqtab(samp_score_m, digits = 0)
zzz <- equate(ry, rx, type= "equipercentile")
new_score <- equate(out_data$math_ss, y = zzz)
summary(new_score)
plot(zzz)
?equate
zzz <- equate(ry, rx, type= "equipercentile", boot = TRUE, reps = 5)
new_score <- equate(out_data$math_ss, y = zzz)
summary(new_score)
scale_score_to_sat <- function(x, subect = c("read", "math")) {
samp_score_w <- rnorm(10000, mean = 533, sd = 100)
samp_score_w <- ifelse(samp_score_w < 200, 200, samp_score_w)
samp_score_w <- ifelse(samp_score_w > 800, 800, samp_score_w)
samp_score_w <- round(samp_score_w, digits = 0)
samp_score_m <- rnorm(10000, mean = 527, sd = 107)
samp_score_m <- ifelse(samp_score_m < 200, 200, samp_score_m)
samp_score_m <- ifelse(samp_score_m > 800, 800, samp_score_m)
samp_score_m <- round(samp_score_m, digits = 0)
if (subject == "read") {
rx <- equate::freqtab(samp_score_w, digits = 0)
} else if (subject == "math") {
rx <- equate::freqtab(samp_score_m, digits = 0)
}
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate(x, y = zzz)
return(x)
}
names(out_data)
table(out_data$cohort_grad_year)
