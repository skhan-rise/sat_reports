################################################################################
# Generate SAT Report Data
# Date: 09/03/2018
# Author: Jared E. Knowles
# Prepared for OpenSDP
################################################################################

## Identify the data structure needed 
## File - student grade 3-8


| Male  | `r sum(data$SEX == "M")`
| Female | `r sum(data$SEX == "F")`
| Cuban  | `r sum(data$RACE_ETH_CUBAN == "Y")`
| Mexican | `r sum(data$RACE_ETH_MEXICAN == "Y")`
| Puerto Rican | `r sum(data$RACE_ETH_PUERTORICAN == "Y")`
| Hispanic/Latino | `r sum(data$RACE_ETH_HISP_LAT == "Y")`
| Non-Hispanic | `r sum(data$RACE_ETH_PUERTORICAN == "Y")`

| Race Categories | Number of Students |
  |:--|:--:|
  | American Indian/Alaska Native | `r sum(data$RACE_ETH_INDIAN_ALASKAN == "Y")`
| Asian | `r sum(data$RACE_ETH_ASIAN == "Y")`
| African American | `r sum(data$RACE_ETH_AFRICANAMERICAN == "Y")`
| White | `r sum(data$RACE_ETH_WHITE == "Y")`
| Native Hawaiian/Pacific Islander | `r sum(data$RACE_ETH_HAWAIIAN_PI == "Y")`
| Other | `r sum(data$RACE_ETH_OTHER == "Y")`

| `r round(mean(data$LATEST_SAT_TOTAL), 2)` | `r round(mean(data$LATEST_SAT_EBRW), 2)` | `r round(mean(data$LATEST_SAT_MATH_SECTION), 2)`

###Average Total Scores Over Time
|  | Total | EBRW | Math |
  |:--:|:--:|:--:|:--:|
  | SAT 11 | `r round(mean(data$LATEST_SAT_TOTAL), 2)` | `r round(mean(data$LATEST_SAT_EBRW), 2)` | `r round(mean(data$LATEST_SAT_MATH_SECTION), 2)`


##Average Sub-Section Scores

| Reading | Writing & Language | Math Section |
  |:--:|:--:|:--:|
  | `r round(mean(data$LATEST_SAT_READING), 2)` | `r round(mean(data$LATEST_SAT_WRIT_LANG), 2)` | `r round(mean(data$LATEST_SAT_MATH_TEST), 2)`

##Average Cross-Section Scores

| Science Cross | History Cross | 
  |:--:|:--:|
  | `r round(mean(data$LATEST_SAT_SCI_CROSS), 2)` | `r round(mean(data$LATEST_SAT_HIST_SOCST_CROSS), 2)` |
  
  ##Average EBRW Question-Type Scores
  
  | Words in Context | Command of Evidence | Expression of Ideas | Standard English Conventions |
  |:------:|:------:|:------:|:-----------:|
  | `r round(mean(data$LATEST_SAT_WORDS_CONTEXT), 2)` | `r round(mean(data$LATEST_SAT_COMM_EVIDENCE), 2)` | `r round(mean(data$LATEST_SAT_EXPR_IDEAS), 2)` | `r round(mean(data$LATEST_SAT_ENG_CONVENT), 2)` 

##Average Math Question-Type Scores

| Heart of Algebra | Advanced Mathematics | Problem Solving & Data Analysis |
  |:--:|:--:|:--:|
  | `r round(mean(data$LATEST_SAT_HEART_ALGEBRA), 2)` | `r round(mean(data$LATEST_SAT_ADV_MATH), 2)` | `r round(mean(data$LATEST_SAT_PROBSLV_DATA), 2)`

## File requirements
### Student IDs
### Exam score dates for each exam

#FILLER_4 
# GOOD FOR NOW??

## grade_level 
## school_code
## sid
## male
## race_ethnicity
## eco_dis
## title_1
## migrant
## lep
## iep
## rdg_ss
## math_ss
## wrtg_ss
## composition
## wrtg_perc

## 

library(OpenSDPsynthR)
set.seed(0525212) # set the seed
library(magrittr)
library(stringr)
# The synthesizer needs some input paramaters
# As it is the defaults are not sufficient to give realistic assessment data
# These change those defaults to make the scores less deterministic

assess_adj <- sim_control()$assessment_adjustment

# Make scores spread out more
assess_adj$perturb_base <- function(x, sd) 
{
  mean_shift <- rnorm(1, sd = 3)
  y <- x + rnorm(1, mean_shift, sd * 0.8)
  return(y)
}

assess_adj$gender_list <- list("Male" = 1, 
                               "Female" = -1)

assess_adj$frl_list <- list("0" = 0.1, 
                            "1" = -0.1)

# Downadjust the IEP difference


# Get defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance
assess_sim_par$error_var <- 15
# Increase coefficient effects
assess_sim_par$fixed_param <- assess_sim_par$fixed_param * 10
# Downgrade IEP difference
assess_sim_par$fixed_param[4] <- -0.75
# Downgrade LEP difference
assess_sim_par$fixed_param[5] <- -1
assess_sim_par$fixed_param[6] <- 0
assess_sim_par$fixed_param[7] <- 1
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- 10
# Set group level variances
assess_sim_par$random_param$random_var <- c(0.4, 0.75)
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(100, 420)

grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
  val_mean <- schl_par[[which(schid == names(schl_par))]]
  val_sd <- val_mean / 4
  val_sd <- abs(val_sd)
  y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
  y <- ifelse(y <= 0, 0.01, y)
  y <- ifelse(y >= 1, 0.98, y)
  y <- num_clip(y, 0, 1)
  return(y)
}


# Conduct the simulation
simlist <- simpop(5000L, seed = 0525212, 
                  control = sim_control(nschls = 12L, n_cohorts = 4L, 
                                        assessment_adjustment = assess_adj,
                                        assess_sim_par = assess_sim_par, 
                                        grad_adjustment = grad_adj))

sat_report_cleaner <- function(simlist){
  out_data <- left_join(simlist$demog_master %>% 
                          select(sid, Sex, Race), simlist$stu_year)
  out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
  out_data <- left_join(out_data, simlist$stu_assess %>% dplyr::select(sid, math_ss, rdg_ss))
  out_data <- filter(out_data, grade == "11")
  out_data$Race <-  forcats::fct_expand(out_data$Race, 
                                        "MEXICAN", "PUERTORICAN", 
                                        "HISP_LAT", "NON_HISP_LAT", 
                                        "CUBAN")
  # Augment race variables
  out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <- 
    sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]), 
           replace = TRUE)
  # Factor expand
  
  # Derive race
  
  # School Code and name
  out_data <- rename(out_data, AI_CODE = schid)
  out_data <- rename(out_data, AI_NAME = name)
  out_data <- rename(out_data,  DISTRICT_NAME = lea_id)
  out_data$DISTRICT_NAME <- "AIUR"
  out_data <- rename(out_data, SECONDARY_ID = sid)
  
  # Projected Grad Date
  out_data$PROJ_GRAD_DATE <- paste0(out_data$cohort_grad_year, "-05")
  # LATEST_ASSESSMENT_DATE = M-DD-YYYY
  # LATEST_GRADE_LEVEL = integer
  # LATEST_REVISED = blank
  out_data$LATEST_ASSESSMENT_DATE <- paste0("3-22-", out_data$cohort_grad_year - 1)
  out_data$LATEST_GRADE_LEVEL <- 11
  out_data$LATEST_REVISED <- ""
  
  # Derive scores
  # LATEST_SAT_TOTAL = 400-1600
  # LATEST_SAT_EBRW = reading score 200-800
  # LATEST_SAT_MATH_SECTION = 200-800
  
  out_data$LATEST_SAT_EBRW <- scale_score_to_sat(out_data$rdg_ss, 
                                                 subject = "read")
  out_data$LATEST_SAT_MATH_SECTION <- scale_score_to_sat(out_data$math_ss, 
                                                         subject = "math")
  out_data$LATEST_SAT_TOTAL <- out_data$LATEST_SAT_EBRW + 
    out_data$LATEST_SAT_MATH_SECTION
  out_data$LATEST_SAT_TOTAL <- scale_score_to_sat(out_data$LATEST_SAT_TOTAL, 
                                                  subject = "total")
  
  
}


# AI CODE = school code
# AI NAME = school name
# FILLER_1 = DROP
# COHORT_YEAR = ??
# DISTRICT_NAME 
# NAME_LAST = student last name
# NAME_FIRST = student first name
# NAME_MI = student middle initial
# SEX = sex
# RACE_ETH_MEXICAN = Y / blank
# RACE_ETH_PUERTORICAN = Y / blank
# RACE_ETH_HISP_LAT = Y / blank
# RACE_ETH_NON_HISP_LAT = Y / blank
# RACE_ETH_INDIAN_ALASKAN = Y / blank
# RACE_ETH_ASIAN = Y / blank
# RACE_ETH_AFRICANAMERICAN = Y / blank
# RACE_ETH_HAWAIIAN_PI = Y / blank
# RACE_ETH_WHITE  = Y / blank
# FILLER_2 = DROP
# DERIVED_AGGREGATE_RACE_ETH = 2,3,4,9
# FILLER_3
# CB_ID = sequential ID number
# SECONDARY_ID = HS_student ID
# PROJ_GRAD_DATE = YYYY-MM
# LATEST_SAT_TOTAL = 400-1600
# LATEST_SAT_EBRW = reading score 200-800
# LATEST_SAT_MATH_SECTION = 200-800
## Subscales (Need to get documentation on minimum values here)


trim_num <- function(x, floor, ceiling){
  x[x < floor] <- floor
  x[x > ceiling] <- ceiling
  return(x)
}

scale_score_to_sat <- function(x, subject = c("read", "math", "total")) {
  samp_score_w <- rnorm(10000, mean = 533, sd = 100)
  samp_score_w <- trim_num(samp_score_w, 200, 800)
  samp_score_w <- round(samp_score_w, digits = 0)
  
  samp_score_m <- rnorm(10000, mean = 527, sd = 107)
  samp_score_m <- trim_num(samp_score_m, 200, 800)
  samp_score_m <- round(samp_score_m, digits = 0)
  
  samp_score_t <- rnorm(10000, mean = 1060, sd = 195)
  samp_score_t <- trim_num(samp_score_t, 400, 1600)
  samp_score_t <- round(samp_score_t, digits = 0)
  
  if (subject == "read") {
    rx <- equate::freqtab(samp_score_w)
  } else if (subject == "math") {
    rx <- equate::freqtab(samp_score_m)
  } else if (subject == "total") {
    rx <- equate::freqtab(samp_score_t)
  }
  
  ry <- equate::freqtab(round(x, digits = 0))
  ## Equate the new score with the simulated SAT score
  zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
  new_score <- equate::equate(x, y = zzz)
  new_score <- round(new_score, digits = 0)
  return(new_score)
}




compute_subscores <- function(x, subject = c("read", "math")) { 
  examp_score_40 <- round(rnorm(10000, 20, 5.25), 0)
  examp_score_40 <- trim_num(examp_score_40, floor = 10, ceiling = 40)
  examp_score_15 <- round(rnorm(10000, 8, 2.25), 0)
  examp_score_15 <- trim_num(examp_score_15, floor = 1, ceiling = 15)
  
  ftab_40 <- equate::freqtab(examp_score_40)
  ftab_15 <- equate::freqtab(examp_score_15)
  
  ftab_obs <- equate::freqtab(x)
  eq_40 <- equate::equate(ftab_obs, ftab_40, type = "equipercentile", 
                          boot = TRUE, reps = 5)
  eq_15 <- equate::equate(ftab_obs, ftab_15, type = "equipercentile", 
                          boot = TRUE, reps = 5)
  
  out_1 <- equate::equate(x, y = eq_40)
  out_2 <- equate::equate(x, y = eq_40)
  
  
  
  }


# LATEST_SAT_READING = 10-40
# LATEST_SAT_WRIT_LANG = 10-40
# LATEST_SAT_MATH_TEST = 10-40 by 0.5
# LATEST_SAT_SCI_CROSS = 10-40
# LATEST_SAT_HIST_SOCST_CROSS = 10-40
# LATEST_SAT_WORDS_CONTEXT = 1-15
# LATEST_SAT_COMM_EVIDENCE= 1-15
# LATEST_SAT_EXPR_IDEAS= 1-15
# LATEST_SAT_ENG_CONVENT= 1-15
# LATEST_SAT_HEART_ALGEBRA= 1-15
# LATEST_SAT_ADV_MATH= 1-15
# LATEST_SAT_PROBSLV_DATA= 1-15
# LATEST_SAT_ESSAY_READING= 0, 2-8
# LATEST_SAT_ESSAY_ANALYSIS= 0, 2-8
# LATESTS_SAT_ESSAY_WRITING= 0, 2-8


# Save
# save(export, file = "data/synth_texas.rda")
# write.csv(export, file = "data/synth_texas.csv", 
#           row.names = FALSE)
